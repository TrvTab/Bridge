[{"/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/index.js":"1","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/reportWebVitals.js":"2","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/App.js":"3","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/markers/marker.js":"4","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/Loop.js":"5","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/LoopList.js":"6","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/LoopForm.js":"7","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/dictaphone.js":"8","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/players/player.js":"9","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/players/duration.js":"10"},{"size":500,"mtime":1637012593697,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1637012593697,"results":"13","hashOfConfig":"12"},{"size":939,"mtime":1637332285671,"results":"14","hashOfConfig":"12"},{"size":715,"mtime":1637300651415,"results":"15","hashOfConfig":"12"},{"size":781,"mtime":1637332212211,"results":"16","hashOfConfig":"12"},{"size":1322,"mtime":1637332185969,"results":"17","hashOfConfig":"12"},{"size":1667,"mtime":1637327066054,"results":"18","hashOfConfig":"12"},{"size":2851,"mtime":1637332285671,"results":"19","hashOfConfig":"12"},{"size":13108,"mtime":1637332285671,"results":"20","hashOfConfig":"12"},{"size":522,"mtime":1637332285671,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1p6pgsk",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/index.js",[],["49","50"],"/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/reportWebVitals.js",[],"/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/App.js",["51"],"import logo from './logo.svg';\nimport './App.css';\nimport Dictaphone from './components/dictaphone';\nimport Player from './components/players/player';\nimport LoopList from './components/LoopList.js'\nimport {Row, Col} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>      \n      <Player/>\n     \n      <Row>\n        <Col>\n          <LoopList></LoopList>\n        </Col>\n        <Col>\n          <LoopList></LoopList>\n        </Col>\n      </Row>\n\n    </div>\n  );\n}\n\nexport default App;\n","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/markers/marker.js",[],"/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/Loop.js",["52","53","54","55","56","57","58","59","60","61"],"import { useState, useEffect} from 'react'\nimport {Button, Container, Stack, Row, Col, CloseButton} from 'react-bootstrap';\nimport Circle from 'react-color'\nimport { CirclePicker } from 'react-color'\n\nfunction Loop(props){\n    const [title, setTitle] = useState(props.title);\n    const [colour, setColour] = useState(props.colour);\n    const [startTime, setStartTime] = useState(props.startTime);\n    const [endTime, setEndTime] = useState(props.endTime);\n\n    return (\n\n        <Container >\n                <Row>\n                    <span>{colour}</span>\n                    <Col>\n                    <span>{title}</span>\n                    <span> {startTime} {endTime}</span>\n                    </Col>\n\n                </Row>\n\n        </Container>\n    );\n}\nexport default Loop;","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/LoopList.js",["62","63","64","65","66"],"import { useState, useEffect} from 'react'\nimport Loop from './Loop'\nimport LoopForm from './LoopForm'\nimport {Button, Container, Stack, Row, Col, CloseButton, Text, Form} from 'react-bootstrap';\n\n\nfunction LoopList(){\n    const [listItems, setListItems] = useState([])\n    const [showForm, setShowForm] = useState(false)\n\n\n    const handleRemove = (key) => {\n        console.log(\"TEEEEST\")\n        setListItems(listItems => listItems.filter((item) => item.key !== key))\n    }\n\n    const submitLoop = (title, colour, startTime, endTime) => {\n        setShowForm(false)\n        setListItems(listItems => [...listItems,\n        <li list-style=\"none\" key={title}>\n            <Row>\n                <Loop title={title} colour={colour} startTime={startTime} endTime={endTime}></Loop>\n                <CloseButton onClick={() => handleRemove(title)}></CloseButton>\n            </Row>\n        </li>])\n    }\n\n    const addLoop = () => {\n        setShowForm(true)\n    }\n    \n\n    return (\n      <Container>\n        {!showForm && (\n          <ul>\n            {listItems}\n            <Button onClick={addLoop}></Button>\n          </ul>\n        )}\n        {showForm && (\n            <div>\n                <LoopForm submitLoop={submitLoop}></LoopForm>\n            </div>\n        )}\n\n      </Container>\n    );\n}\nexport default LoopList;","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/LoopForm.js",["67","68","69","70","71","72","73"],"import { useState, useEffect} from 'react'\nimport Loop from './Loop'\nimport {Button, Container, Stack, Row, Col, CloseButton, Text, Form} from 'react-bootstrap';\n\n\nfunction LoopForm({submitLoop}){\n\n  const [title, setTitle] = useState();\n  const [colour, setColour] = useState();\n  const [startTime, setStartTime] = useState();\n  const [endTime, setEndTime] = useState();\n\n  const handleSubmit= (e) => {\n    submitLoop(title, colour, startTime, endTime)\n    e.preventDefault();\n\n  }\n  return(\n        <Form onSubmit={e => { handleSubmit(e) }}>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control placeholder=\"Loop 1, Loop 2...\"\n              name='title'\n              type='text'\n              value={title} \n              onChange={ e => setTitle(e.target.value)}\n            />\n          </Form.Group>\n          <Row className=\"mb-3\">\n            <Form.Group as={Col}>\n              <Form.Label>Start Time</Form.Label>\n              <Form.Control\n                name='startTime'\n                type='text'\n                value={startTime} \n                onChange={ e => setStartTime(e.target.value)}\n              />\n            </Form.Group>\n\n            <Form.Group as={Col} className=\"mb-3\">\n              <Form.Label>End Time</Form.Label>\n              <Form.Control\n                name='endTime'\n                type='text'\n                value={endTime} \n                onChange={ e => setEndTime(e.target.value)}\n              />\n            </Form.Group>\n            <Button type='submit'>Submit Loop</Button>\n          </Row>\n        </Form>\n  );\n}\nexport default LoopForm;\n       \n       \n","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/dictaphone.js",["74","75"],"//import React from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { useState, useEffect } from 'react'\n\n\nfunction Dictaphone(props) {\n\n  const [message, setMessage] = useState({\n    request: '',\n    name: '',\n    firstTimeStamp: '',\n    secondTimeStamp: ''\n  })\n\n  const commands = [\n\n    //Add marker and loop with name\n    {\n      command: 'add marker called :name at :timestamp',\n      callback: (name, timestamp) => setMessage({request: 'addMarker', name: name, firstTimeStamp: timestamp})\n    },\n    {\n      command: 'Add loop called :name from :firstTimeStamp to :secondTimeStamp ',\n      callback: (name, firstTimeStamp, secondTimeStamp) => \n          setMessage({request: 'addLoop', name: name, firstTimeStamp: firstTimeStamp, secondTimeStamp: secondTimeStamp})\n    },\n    //Add marker and loop without name\n    {\n      command: 'add marker at :timestamp',\n      callback: (timestamp) => setMessage({request: 'addMarker', firstTimeStamp: timestamp})\n    },\n    {\n      command: 'Add loop from :firstTimeStamp to :secondTimeStamp ',\n      callback: (firstTimeStamp, secondTimeStamp) => \n          setMessage({request: 'addLoop', firstTimeStamp: firstTimeStamp, secondTimeStamp: secondTimeStamp})\n    },\n    //Delete marker and loop \n    {\n      command: 'Delete marker called :name ',\n      callback: (name) => \n          setMessage({request: 'delMarker', name: name})\n    },\n    {\n      command: 'Delete loop called :name ',\n      callback: (name) => \n          setMessage({request: 'delLoop', name: name})\n    },\n    {\n      command: 'skip ahead',\n      callback: () =>\n          setMessage({request: 'skipFwd'})\n    },\n    {\n      command: 'skip backwards',\n      callback: () =>\n          setMessage({request: 'skipBwd'})\n    },\n    {\n      command: 'restart',\n      callback: () =>\n          setMessage({request: 'restart'})\n    }\n\n  ]\n\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition({commands});\n  \n  \n  function handleTranscriptChange(event){\n    console.log(event.target.value)\n  }\n\n  // Everytime message is updated, reset it and send data to parent\n  useEffect(() => {\n    props.sendToPlayer(message)\n    resetTranscript()\n\n    return () => {\n      resetTranscript()\n    }\n  }, [message])\n\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n\n  return (\n    <div>\n      <p>Microphone: {listening ? 'on' : 'off'}</p>\n      <button onClick={SpeechRecognition.startListening}>Start</button>\n      <button onClick={SpeechRecognition.stopListening}>Stop</button>\n      <button onClick={resetTranscript}>Reset</button>\n      <p>{message.request + \" \" + message.name}</p>\n      <p>{transcript}</p>\n    </div>\n  );\n};\nexport default Dictaphone;","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/players/player.js",["76","77","78","79","80","81","82"],"import React, { Component } from 'react'\nimport { findDOMNode } from 'react-dom'\nimport Dictaphone from '../dictaphone'\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport DropdownButton from 'react-bootstrap/DropdownButton'\n// import { hot } from 'react-hot-loader'\n//full from 'screenfull'\n\n// import './reset.css'\n// import './defaults.css'\n// import './range.css'\n// import './App.css'\n\nimport { version } from '../../../package.json'\nimport ReactPlayer from 'react-player/lazy'\nimport Duration from './duration'\n\nclass Player extends Component {\n  state = {\n    url: null,\n    pip: false,\n    playing: true,\n    controls: false,\n    light: false,\n    volume: 0.8,\n    muted: false,\n    played: 0,\n    loaded: 0,\n    duration: 0,\n    playbackRate: 1.0,\n    loop: false,\n    dictaphoneData: []\n  }\n\n  vocalSkipForward(time){\n    this.player.seekTo(this.player.getCurrentTime() + time, \"seconds\")\n  }\n  vocalSkipBackwards(time){\n    this.player.seekTo(this.player.getCurrentTime() - time, \"seconds\")\n  }\n\n  // add if statements for \n  handleDictaphoneData = (childData) => {\n    this.setState(() => {\n      return {\n        dictaphoneData: childData\n      }\n    })\n    if (childData.request === \"skipFwd\") this.vocalSkipForward(15);\n\n    \n  }\n\n  load = url => {\n    this.setState({\n      url,\n      played: 0,\n      loaded: 0,\n      pip: false\n    })\n  }\n\n  handlePlayPause = () => {\n    this.setState({ playing: !this.state.playing })\n  }\n\n  handleStop = () => {\n    this.setState({ url: null, playing: false })\n  }\n\n  handleToggleControls = () => {\n    const url = this.state.url\n    this.setState({\n      controls: !this.state.controls,\n      url: null\n    }, () => this.load(url))\n  }\n\n  handleToggleLight = () => {\n    this.setState({ light: !this.state.light })\n  }\n\n  handleToggleLoop = () => {\n    this.setState({ loop: !this.state.loop })\n  }\n\n  handleVolumeChange = e => {\n    this.setState({ volume: parseFloat(e.target.value) })\n  }\n\n  handleToggleMuted = () => {\n    this.setState({ muted: !this.state.muted })\n  }\n\n  handleSetPlaybackRate = e => {\n    this.setState({ playbackRate: parseFloat(e.target.value) })\n  }\n\n  handleOnPlaybackRateChange = (speed) => {\n    this.setState({ playbackRate: parseFloat(speed) })\n  }\n\n  handleTogglePIP = () => {\n    this.setState({ pip: !this.state.pip })\n  }\n\n  handlePlay = () => {\n    console.log('onPlay')\n    this.setState({ playing: true })\n  }\n\n  handleEnablePIP = () => {\n    console.log('onEnablePIP')\n    this.setState({ pip: true })\n  }\n\n  handleDisablePIP = () => {\n    console.log('onDisablePIP')\n    this.setState({ pip: false })\n  }\n\n  handlePause = () => {\n    console.log('onPause')\n    this.setState({ playing: false })\n  }\n\n  handleSeekMouseDown = e => {\n    this.setState({ seeking: true })\n  }\n\n  handleSeekChange = e => {\n    this.setState({ played: parseFloat(e.target.value) })\n  }\n\n  handleSeekMouseUp = e => {\n    this.setState({ seeking: false })\n    \n    this.player.seekTo(parseFloat(e.target.value))\n  }\n\n  handleSkipForwardClick= e => {\n    this.player.seekTo(this.player.getCurrentTime() + parseInt(e.target.value), \"seconds\")\n  }\n\n  handleSkipBackwardClick = e => {\n    console.log(e)\n    this.player.seekTo(this.player.getCurrentTime() - parseInt(e.target.value), \"seconds\")\n  }\n\n  handleProgress = state => {\n   // console.log('onProgress', state)\n    // We only want to update time slider if we are not currently seeking\n    if (!this.state.seeking) {\n      this.setState(state)\n    }\n  }\n\n  handleEnded = () => {\n    console.log('onEnded')\n    this.setState({ playing: this.state.loop })\n  }\n\n  handleDuration = (duration) => {\n    console.log('onDuration', duration)\n    this.setState({ duration })\n  }\n\n  renderLoadButton = (url, label) => {\n    return (\n      <button onClick={() => this.load(url)}>\n        {label}\n      </button>\n    )\n  }\n\n  ref = player => {\n    this.player = player\n  }\n\n  render () {\n    const { url, playing, controls, light, volume, muted, loop, played, loaded, duration, playbackRate, pip, dictaphoneData } = this.state\n    const SEPARATOR = ' · '\n\n    return (\n      \n      <div className='app'>\n        <section className='section'>\n          <h1>Bridge</h1>\n          <div className='player-wrapper'>\n            <ReactPlayer\n              ref={this.ref}\n              className='react-player'\n              width='100%'\n              height='100%'\n              url={url}\n              pip={pip}\n              playing={playing}\n              controls={controls}\n              light={light}\n              loop={loop}\n              playbackRate={playbackRate}\n              volume={volume}\n              muted={muted}\n              onReady={() => console.log('onReady')}\n              onStart={() => console.log('onStart')}\n              onPlay={this.handlePlay}\n              onEnablePIP={this.handleEnablePIP}\n              onDisablePIP={this.handleDisablePIP}\n              onPause={this.handlePause}\n              onBuffer={() => console.log('onBuffer')}\n              onPlaybackRateChange={this.handleOnPlaybackRateChange}\n              onSeek={e => console.log('onSeek', e)}\n              onEnded={this.handleEnded}\n              onError={e => console.log('onError', e)}\n              onProgress={this.handleProgress}\n              onDuration={this.handleDuration}\n            />\n          </div>\n          \n          \n\n          <Container>\n            <Row>\n              <Col><input\n                      type='range' min={0} max={0.999999} step='any'\n                      value={played}\n                      onMouseDown={this.handleSeekMouseDown}\n                      onChange={this.handleSeekChange}\n                      onMouseUp={this.handleSeekMouseUp}\n                    />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n              <button onClick={this.handleSkipBackwardClick} value={15}>Rewind 15s</button>\n              <button onClick={this.handlePlayPause}>{playing ? 'Pause' : 'Play'}</button>\n              <button onClick={this.handleSkipForwardClick} value={15}>Skip 15s</button>\n\n              <select onChange={this.handleSetPlaybackRate} name=\"playback speed\" id=\"playbackSpeed\" >\n                <option value={0.25}>0.25x</option>\n                <option value={0.50}>0.50x</option>\n                <option value={0.75}>0.75x</option>\n                <option selected=\"selected\" value={1.00}>1.00x</option>\n                <option value={1.25}>1.25x</option>\n                <option value={1.50}>1.50x</option>\n                <option value={1.75}>1.75x</option>\n              </select>\n              <input type='range' min={0} max={1} step='any' value={volume} onChange={this.handleVolumeChange} />\n\n\n              </Col>\n            </Row>\n          </Container>\n\n        \n\n          <table>\n            <tbody>\n              <tr>\n                <th>Controls</th>\n                <td>\n                  <button onClick={this.handleStop}>Stop</button>\n                  <button onClick={this.handlePlayPause}>{playing ? 'Pause' : 'Play'}</button>\n                  {light &&\n                    <button onClick={() => this.player.showPreview()}>Show preview</button>}\n                  {ReactPlayer.canEnablePIP(url) &&\n                    <button onClick={this.handleTogglePIP}>{pip ? 'Disable PiP' : 'Enable PiP'}</button>}\n                </td>\n              </tr>\n              <tr>\n                <th>Speed</th>\n                <td>\n                  <button onClick={this.handleSetPlaybackRate} value={.25}>.25x</button>\n                  <button onClick={this.handleSetPlaybackRate} value={.5}>.5x</button>\n                  <button onClick={this.handleSetPlaybackRate} value={.75}>.75x</button>\n                  <button onClick={this.handleSetPlaybackRate} value={1}>1x</button>\n                  <button onClick={this.handleSetPlaybackRate} value={1.5}>1.5x</button>\n                  <button onClick={this.handleSetPlaybackRate} value={2}>2x</button>\n                </td>\n              </tr>\n              <tr>\n                <th> Skip </th>\n                <td>\n                  <button onClick={this.handleSkipBackwardClick} value={15}>Rewind 15</button>\n                  <button onClick={this.handleSkipForwardClick} value={15}>Skip 15</button>\n                </td>\n              </tr>\n              <tr>\n                <th>Seek</th>\n                <td>\n                  <input\n                    type='range' min={0} max={0.999999} step='any'\n                    value={played}\n                    onMouseDown={this.handleSeekMouseDown}\n                    onChange={this.handleSeekChange}\n                    onMouseUp={this.handleSeekMouseUp}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <th>Volume</th>\n                <td>\n                  <input type='range' min={0} max={1} step='any' value={volume} onChange={this.handleVolumeChange} />\n                </td>\n              </tr>\n              <tr>\n                <th>\n                  <label htmlFor='controls'>Controls</label>\n                </th>\n                <td>\n                  <input id='controls' type='checkbox' checked={controls} onChange={this.handleToggleControls} />\n                  <em>&nbsp; Requires player reload</em>\n                </td>\n              </tr>\n              <tr>\n                <th>\n                  <label htmlFor='muted'>Muted</label>\n                </th>\n                <td>\n                  <input id='muted' type='checkbox' checked={muted} onChange={this.handleToggleMuted} />\n                </td>\n                <td>\n                </td>\n              </tr>\n              <tr>\n                <th>\n                  <label htmlFor='loop'>Loop</label>\n                </th>\n                <td>\n                  <input id='loop' type='checkbox' checked={loop} onChange={this.handleToggleLoop} />\n                </td>\n              </tr>\n              <tr>\n                <th>\n                  <label htmlFor='light'>Light mode</label>\n                </th>\n                <td>\n                  <input id='light' type='checkbox' checked={light} onChange={this.handleToggleLight} />\n                </td>\n              </tr>\n              <tr>\n                <th>Played</th>\n                <td><progress max={1} value={played} /></td>\n              </tr>\n              <tr>\n                <th>Loaded</th>\n                <td><progress max={1} value={loaded} /></td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n        <section className='section'>\n          <table>\n            <tbody>\n              <tr>\n                <th>YouTube</th>\n                <td>\n                  {this.renderLoadButton('https://www.youtube.com/watch?v=oUFJJNQGwhk', 'Test A')}\n                  {this.renderLoadButton('https://www.youtube.com/watch?v=jNgP6d9HraI', 'Test B')}\n                  {this.renderLoadButton('https://www.youtube.com/playlist?list=PLogRWNZ498ETeQNYrOlqikEML3bKJcdcx', 'Playlist')}\n                </td>\n              </tr>\n              <tr>\n                <th>Custom URL</th>\n                <td>\n                  <input ref={input => { this.urlInput = input }} type='text' placeholder='Enter URL' />\n                  <button onClick={() => this.setState({ url: this.urlInput.value })}>Load</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n\n          <Dictaphone sendToPlayer={this.handleDictaphoneData}/>\n\n          <h2>State</h2>\n\n          <table>\n            <tbody>\n              <tr>\n                <th>url</th>\n                <td className={!url ? 'faded' : ''}>\n                  {(url instanceof Array ? 'Multiple' : url) || 'null'}\n                </td>\n              </tr>\n              <tr>\n                <th>playing</th>\n                <td>{playing ? 'true' : 'false'}</td>\n              </tr>\n              <tr>\n                <th>volume</th>\n                <td>{volume.toFixed(3)}</td>\n              </tr>\n              <tr>\n                <th>speed</th>\n                <td>{playbackRate}</td>\n              </tr>\n              <tr>\n                <th>played</th>\n                <td>{played.toFixed(3)}</td>\n              </tr>\n              <tr>\n                <th>loaded</th>\n                <td>{loaded.toFixed(3)}</td>\n              </tr>\n              <tr>\n                <th>duration</th>\n                <td><Duration seconds={duration} /></td>\n              </tr>\n              <tr>\n                <th>elapsed</th>\n                <td><Duration seconds={duration * played} /></td>\n              </tr>\n              <tr>\n                <th>remaining</th>\n                <td><Duration seconds={duration * (1 - played)} /></td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n        <footer className='footer'>\n         \n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default Player;","/home/jeremychow/mcgill/fall2021/ecse424/Bridge/client/src/components/players/duration.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":18},{"ruleId":"87","severity":1,"message":"91","line":1,"column":20,"nodeType":"89","messageId":"90","endLine":1,"endColumn":29},{"ruleId":"87","severity":1,"message":"92","line":2,"column":9,"nodeType":"89","messageId":"90","endLine":2,"endColumn":15},{"ruleId":"87","severity":1,"message":"93","line":2,"column":28,"nodeType":"89","messageId":"90","endLine":2,"endColumn":33},{"ruleId":"87","severity":1,"message":"94","line":2,"column":45,"nodeType":"89","messageId":"90","endLine":2,"endColumn":56},{"ruleId":"87","severity":1,"message":"95","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":14},{"ruleId":"87","severity":1,"message":"96","line":4,"column":10,"nodeType":"89","messageId":"90","endLine":4,"endColumn":22},{"ruleId":"87","severity":1,"message":"97","line":7,"column":19,"nodeType":"89","messageId":"90","endLine":7,"endColumn":27},{"ruleId":"87","severity":1,"message":"98","line":8,"column":20,"nodeType":"89","messageId":"90","endLine":8,"endColumn":29},{"ruleId":"87","severity":1,"message":"99","line":9,"column":23,"nodeType":"89","messageId":"90","endLine":9,"endColumn":35},{"ruleId":"87","severity":1,"message":"100","line":10,"column":21,"nodeType":"89","messageId":"90","endLine":10,"endColumn":31},{"ruleId":"87","severity":1,"message":"91","line":1,"column":20,"nodeType":"89","messageId":"90","endLine":1,"endColumn":29},{"ruleId":"87","severity":1,"message":"93","line":4,"column":28,"nodeType":"89","messageId":"90","endLine":4,"endColumn":33},{"ruleId":"87","severity":1,"message":"101","line":4,"column":40,"nodeType":"89","messageId":"90","endLine":4,"endColumn":43},{"ruleId":"87","severity":1,"message":"102","line":4,"column":58,"nodeType":"89","messageId":"90","endLine":4,"endColumn":62},{"ruleId":"87","severity":1,"message":"103","line":4,"column":64,"nodeType":"89","messageId":"90","endLine":4,"endColumn":68},{"ruleId":"87","severity":1,"message":"91","line":1,"column":20,"nodeType":"89","messageId":"90","endLine":1,"endColumn":29},{"ruleId":"87","severity":1,"message":"104","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":12},{"ruleId":"87","severity":1,"message":"105","line":3,"column":17,"nodeType":"89","messageId":"90","endLine":3,"endColumn":26},{"ruleId":"87","severity":1,"message":"93","line":3,"column":28,"nodeType":"89","messageId":"90","endLine":3,"endColumn":33},{"ruleId":"87","severity":1,"message":"94","line":3,"column":45,"nodeType":"89","messageId":"90","endLine":3,"endColumn":56},{"ruleId":"87","severity":1,"message":"102","line":3,"column":58,"nodeType":"89","messageId":"90","endLine":3,"endColumn":62},{"ruleId":"87","severity":1,"message":"98","line":9,"column":18,"nodeType":"89","messageId":"90","endLine":9,"endColumn":27},{"ruleId":"87","severity":1,"message":"106","line":74,"column":12,"nodeType":"89","messageId":"90","endLine":74,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":86,"column":6,"nodeType":"109","endLine":86,"endColumn":15,"suggestions":"110"},{"ruleId":"87","severity":1,"message":"111","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"92","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":14},{"ruleId":"87","severity":1,"message":"112","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":16},{"ruleId":"87","severity":1,"message":"113","line":9,"column":8,"nodeType":"89","messageId":"90","endLine":9,"endColumn":22},{"ruleId":"87","severity":1,"message":"114","line":18,"column":10,"nodeType":"89","messageId":"90","endLine":18,"endColumn":17},{"ruleId":"87","severity":1,"message":"115","line":185,"column":110,"nodeType":"89","messageId":"90","endLine":185,"endColumn":124},{"ruleId":"87","severity":1,"message":"116","line":186,"column":11,"nodeType":"89","messageId":"90","endLine":186,"endColumn":20},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'Dictaphone' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Button' is defined but never used.","'Stack' is defined but never used.","'CloseButton' is defined but never used.","'Circle' is defined but never used.","'CirclePicker' is defined but never used.","'setTitle' is assigned a value but never used.","'setColour' is assigned a value but never used.","'setStartTime' is assigned a value but never used.","'setEndTime' is assigned a value but never used.","'Col' is defined but never used.","'Text' is defined but never used.","'Form' is defined but never used.","'Loop' is defined but never used.","'Container' is defined but never used.","'handleTranscriptChange' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'resetTranscript'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["119"],"'findDOMNode' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'version' is defined but never used.","'dictaphoneData' is assigned a value but never used.","'SEPARATOR' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [message, props, resetTranscript]",{"range":"122","text":"123"},[2328,2337],"[message, props, resetTranscript]"]